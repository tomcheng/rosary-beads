{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Count","_templateObject2","String","_templateObject3","BallsContainer","_templateObject4","Ball","_templateObject5","Balls","_ref","_ref$position","position","_ref$height","height","onIncrementCount","numBalls","Math","ceil","BALL_SIZE","previousPosition","value","ref","useRef","useEffect","current","usePrevious","floor","window","navigator","vibrate","react_default","a","createElement","style","top","range","map","num","key","App","_useState3","useState","_useState4","Object","slicedToArray","setPosition","_useState5","_useState6","touchData","setTouchData","_useMomentum","_useState","_useState2","data","setData","raf","cancelAnimationFrame","requestAnimationFrame","abs","velocity","time","Date","getTime","distance","lastTime","objectSpread","callback","vel","useMomentum","_useMomentum2","startMomentum","stopMomentum","_useState7","_useState8","count","setCount","_useState9","_useState10","setHeight","container","useLayoutEffect","offsetHeight","incrementCount","useCallback","onTouchStart","evt","startY","touches","screenY","previousY","previousTime","y","onTouchMove","onTouchEnd","dis","onClick","App_String","App_Balls","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","addEventListener","preventDefault","passive","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68980510.chunk.js","sourcesContent":["import React, {\n  useRef,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useState\n} from \"react\";\nimport range from \"lodash/range\";\nimport styled from \"styled-components\";\n\nconst BALL_SIZE = 100;\nconst DISTANCE_BETWEEN_BALLS = BALL_SIZE + 6;\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  background-color: #7a0116;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  overflow: hidden;\n`;\n\nconst Count = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  color: #fff;\n  font-size: 24px;\n  user-select: none;\n`;\n\nconst String = styled.div`\n  position: absolute;\n  top: 0;\n  height: 100vh;\n  left: 50%;\n  width: 4px;\n  margin-left: -2px;\n  background-color: #000102;\n`;\n\nconst usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nconst useMomentum = () => {\n  const [data, setData] = useState(null);\n  const raf = useRef();\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    cancelAnimationFrame(raf.current);\n\n    raf.current = requestAnimationFrame(() => {\n      if (Math.abs(data.velocity) < 0.001) {\n        setData(null);\n        return;\n      }\n\n      const time = new Date().getTime();\n      const distance = data.distance + data.velocity * (time - data.lastTime);\n      setData({\n        ...data,\n        velocity: 0.95 * data.velocity,\n        lastTime: time,\n        distance\n      });\n\n      data.callback(distance);\n    });\n  }, [data]);\n\n  const startMomentum = (vel, callback) => {\n    cancelAnimationFrame(raf.current);\n\n    setData({\n      velocity: vel,\n      lastTime: new Date().getTime(),\n      distance: 0,\n      callback\n    });\n  };\n\n  const stopMomentum = () => {\n    cancelAnimationFrame(raf.current);\n    setData(null);\n  };\n\n  return [startMomentum, stopMomentum];\n};\n\nconst App = () => {\n  const [position, setPosition] = useState(0);\n  const [touchData, setTouchData] = useState(null);\n  const [startMomentum, stopMomentum] = useMomentum();\n  const [count, setCount] = useState(0);\n\n  const [height, setHeight] = useState(null);\n  const container = useRef();\n\n  useLayoutEffect(() => {\n    setHeight(container.current.offsetHeight);\n  }, [setHeight]);\n\n  const incrementCount = useCallback(() => {\n    setCount(count + 1);\n  }, [setCount, count]);\n\n  return (\n    <Container\n      ref={container}\n      onTouchStart={evt => {\n        stopMomentum();\n        setTouchData({\n          startY: evt.touches[0].screenY,\n          previousY: null,\n          previousTime: null,\n          y: evt.touches[0].screenY,\n          time: new Date().getTime()\n        });\n      }}\n      onTouchMove={evt => {\n        setTouchData({\n          ...touchData,\n          previousY: touchData.y,\n          previousTime: touchData.time,\n          y: evt.touches[0].screenY,\n          time: new Date().getTime()\n        });\n      }}\n      onTouchEnd={() => {\n        const velocity =\n          (touchData.y - touchData.previousY) /\n          (touchData.time - touchData.previousTime);\n\n        setPosition(position + touchData.y - touchData.startY);\n        setTouchData(null);\n        startMomentum(velocity, dis => {\n          setPosition(position + dis);\n        });\n      }}\n    >\n      <Count\n        onClick={() => {\n          setCount(0);\n        }}\n      >\n        {count}\n      </Count>\n      <String />\n      <Balls\n        position={\n          touchData ? touchData.y - touchData.startY + position : position\n        }\n        height={height}\n        onIncrementCount={incrementCount}\n      />\n    </Container>\n  );\n};\n\nconst BallsContainer = styled.div`\n  position: relative;\n`;\n\nconst Ball = styled.div`\n  position: absolute;\n  left: 0;\n  margin-left: -${0.5 * BALL_SIZE}px;\n  height: ${BALL_SIZE}px;\n  width: ${BALL_SIZE}px;\n  background-color: #b7672e;\n  border-radius: 50%;\n`;\n\nconst Balls = ({ position = 0, height = 0, onIncrementCount }) => {\n  const numBalls = Math.ceil(height / DISTANCE_BETWEEN_BALLS);\n  const previousPosition = usePrevious(position);\n\n  useEffect(() => {\n    if (\n      Math.floor(previousPosition / DISTANCE_BETWEEN_BALLS) !==\n      Math.floor(position / DISTANCE_BETWEEN_BALLS)\n    ) {\n      window.navigator.vibrate(20);\n      onIncrementCount();\n    }\n  }, [position, previousPosition, onIncrementCount]);\n\n  return (\n    <BallsContainer style={{ top: position % DISTANCE_BETWEEN_BALLS }}>\n      {range(-1, numBalls).map(num => (\n        <Ball key={num} style={{ top: num * DISTANCE_BETWEEN_BALLS }} />\n      ))}\n    </BallsContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nwindow.addEventListener(\n  \"touchmove\",\n  evt => {\n    evt.preventDefault();\n  },\n  { passive: false }\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}